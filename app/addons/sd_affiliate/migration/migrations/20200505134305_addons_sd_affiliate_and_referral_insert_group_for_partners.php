<?php
 use Phinx\Migration\AbstractMigration; class AddonsSdAffiliateAndReferralInsertGroupForPartners extends AbstractMigration { protected $addon_id = 'sd_affiliate'; protected $affiliate_group_en = 'SD:Affiliate'; protected $affiliate_group_ru = 'SD:Партнерство'; protected $assign_affiliate_group = false; protected $partner_status = 'P'; protected $setting_for_group = 'affiliates_usergroup'; public function up() { $options = $this->adapter->getOptions(); $prefix = $options['prefix']; $addon = $this->fetchRow( "SELECT addon FROM {$prefix}addons" . " WHERE addon = '{$this->addon_id}'" ); if (empty($addon)) { return; } $en_usergroup_id = $this->fetchRow("SELECT usergroup_id FROM {$prefix}usergroup_descriptions WHERE usergroup = '{$this->affiliate_group_en}'"); $ru_usergroup_id = $this->fetchRow("SELECT usergroup_id FROM {$prefix}usergroup_descriptions WHERE usergroup = '{$this->affiliate_group_ru}'"); $result_exists = $this->fetchRow("SELECT usergroup_id FROM {$prefix}usergroups WHERE usergroup_id = '{$en_usergroup_id['usergroup_id']}' AND type = '{$this->partner_status}'"); $is_usergroup_en_exists = false; $is_usergroup_ru_exists = false; if ($result_exists && $is_usergroup_en_exists) { $is_usergroup_en_exists = true; } if ($result_exists && $ru_usergroup_id) { $is_usergroup_ru_exists = true; } if (!$is_usergroup_en_exists) { $this->assign_affiliate_group = true; $data = [ 'status' => 'A', 'type' => 'P', 'company_id' => 0 ]; list($fields, $values) = $this->prepareForInsert($data); $this->execute("INSERT INTO {$prefix}usergroups ({$fields}) VALUES ($values)"); $affiliate_usergroup_id = $this->fetchRow("SELECT LAST_INSERT_ID()"); $affiliate_usergroup_id = reset($affiliate_usergroup_id); if (!empty($affiliate_usergroup_id)) { $this->execute("UPDATE {$prefix}settings_objects SET value = '{$affiliate_usergroup_id}' WHERE name = '{$this->setting_for_group}'"); } $data_en = [ 'usergroup_id' => $affiliate_usergroup_id, 'lang_code' => 'en', 'usergroup' => $this->affiliate_group_en ]; list($fields, $values) = $this->prepareForInsert($data_en); $this->execute("INSERT INTO {$prefix}usergroup_descriptions ({$fields}) VALUES ($values)"); } if (!$is_usergroup_ru_exists) { $this->assign_affiliate_group = true; $data_ru = [ 'usergroup_id' => $affiliate_usergroup_id, 'lang_code' => 'ru', 'usergroup' => $this->affiliate_group_ru ]; list($fields, $values) = $this->prepareForInsert($data_ru); $this->execute("INSERT INTO {$prefix}usergroup_descriptions ({$fields}) VALUES ($values)"); } if ($this->assign_affiliate_group) { $partners = $this->fetchAll("SELECT user_id FROM {$prefix}users WHERE user_type = '{$this->partner_status}'"); $partners_ids = []; foreach ($partners as $partner) { $partners_ids[] = $partner['user_id']; } $usergroup_links = $this->fetchAll("SELECT user_id, usergroup_id FROM {$prefix}usergroup_links WHERE usergroup_id = {$affiliate_usergroup_id}"); } $partners_ids_for_update = []; if (!empty($partners) && !empty($usergroup_links)) { foreach ($usergroup_links as $link) { if (!in_array($link['user_id'], $partners_ids)); $partners_ids_for_update[] = $link['user_id']; } } else { $partners_ids_for_update = $partners_ids; } if (!empty($partners_ids_for_update)) { $insert_query = "INSERT INTO {$prefix}usergroup_links (user_id, usergroup_id, status)" . $this->prepareArrayForInsert($partners_ids_for_update, $affiliate_usergroup_id); $this->execute($insert_query); } } protected function prepareArrayForInsert($data, $usergroup_id) { $result = ' VALUES'; foreach ($data as $item) { $result .= " ({$item}, {$usergroup_id}, 'A'),"; } $result = rtrim($result, ','); $result .= ';'; return $result; } public function down() { } protected function prepareForInsert($data) { $data = array_map('addslashes', $data); $fields = implode(', ', array_keys($data)); $values = sprintf("'%s'", implode("', '", $data)); return [$fields, $values]; } } 