<?php
 use Tygh\Registry; use Tygh\Settings; use Tygh\Navigation\LastView; use Tygh\Enum\AffiliateUserTypes; use Tygh\Enum\UserStatuses; use Tygh\Enum\AffiliateStatuses; defined('BOOTSTRAP') or die('Access denied'); if ($_SERVER['REQUEST_METHOD'] == 'POST') { fn_trusted_vars('payout_data', 'payouts', 'delete'); $suffix = ''; if ($mode == 'm_delete') { if (!empty($_REQUEST['payout_ids'])) { foreach ($_REQUEST['payout_ids'] as $payout_id) { fn_delete_affiliate_payout($payout_id); } } $suffix = '.manage'; } if ($mode == 'do_m_pay_affiliates') { if (!empty($_REQUEST['partner_ids'])) { $new_payouts = []; Tygh::$app['session']['pay_filter'] = empty(Tygh::$app['session']['pay_filter']) ? [] : Tygh::$app['session']['pay_filter']; $pay_filter = & Tygh::$app['session']['pay_filter']; $_date_condition = !empty($pay_filter['last_payout']) ? db_quote(' AND date < ?i', fn_parse_date(sd_NDRiZTU3NTM1NGViY2M0ZDljN2Y3MzA5(), true)) : ''; foreach ($_REQUEST['partner_ids'] as $_partner_id) { $_where_condition = db_quote( 'approved = ?s AND payout_id = ?i AND partner_id = ?s ?p', 'Y', '0', $_partner_id, $_date_condition ); $new_payouts[$_partner_id]['amount'] = db_get_field( 'SELECT SUM(amount)' . ' FROM ?:aff_partner_actions' . ' WHERE ?p', $_where_condition ); if (empty($new_payouts[$_partner_id]['amount'])) { unset($new_payouts[$_partner_id]); } } if (!empty($new_payouts)) { foreach ($new_payouts as $user_id => $new_payout_data) { if (!empty($user_id)) { $_where_condition = db_quote( 'approved = ?s AND payout_id = 0 AND partner_id = ?i ?p', 'Y', $user_id, $_date_condition ); $amount = floatval($new_payout_data['amount']); if (!empty($amount)) { if (sd_YTNhYmE0MTM3MjU4ODc1MWFlZTIzNjE1($user_id, $amount, '-')) { $insert_data = [ 'partner_id' => $user_id, 'amount' => $amount, 'status' => AffiliateStatuses::OPEN, 'date' => TIME, 'company_id' => fn_get_runtime_company_id() ]; $payout_id = db_query('INSERT INTO ?:affiliate_payouts ?e', $insert_data); if (!empty($payout_id)) { db_query( 'UPDATE ?:aff_partner_actions' . ' SET ?u WHERE ?p', ['payout_id' => $payout_id], $_where_condition ); } } } } } } } $suffix = '.manage'; } if ($mode == 'm_add_payouts') { if (!empty($_REQUEST['action_ids']) && is_array($_REQUEST['action_ids'])) { foreach ($_REQUEST['action_ids'] as $user_id => $actions) { if (!empty($user_id) && !empty($actions) && is_array($actions)) { $amount = db_get_field( 'SELECT SUM(amount)' . ' FROM ?:aff_partner_actions' . ' WHERE partner_id = ?i AND approved = ?s AND payout_id = 0 AND action_id IN (?n)', $user_id, 'Y', array_keys($actions) ); $amount = floatval($amount); if (!empty($amount)) { if (sd_YTNhYmE0MTM3MjU4ODc1MWFlZTIzNjE1($user_id, $amount, '-')) { $insert_data = [ 'partner_id' => $user_id, 'amount' => $amount, 'status' => AffiliateStatuses::OPEN, 'date' => TIME, 'company_id' => fn_get_runtime_company_id() ]; $payout_id = db_query('INSERT INTO ?:affiliate_payouts ?e', $insert_data); if (!empty($payout_id)) { db_query( 'UPDATE ?:aff_partner_actions' . ' SET ?u' . ' WHERE partner_id = ?i AND approved = ?s AND payout_id = 0' . ' AND action_id IN (?n)', ['payout_id' => $payout_id], $user_id, 'Y', array_keys($actions) ); } } } } } } if (!empty($payout_id)) { $suffix = ".update?payout_id=$payout_id"; } else { $suffix = '.manage'; } } if ($mode == 'pay_affiliate') { if (!empty($_REQUEST['partner_id'])) { $payout_id = sd_OTEwYjdkYmExMmVlODg2OTc5MDdhYzlk($_REQUEST['partner_id']); if (!empty($payout_id)) { $suffix = ".update?payout_id=$payout_id"; } else { $suffix = '.manage'; } } } return [CONTROLLER_STATUS_OK, "payouts$suffix"]; } if ($mode == 'manage') { $_REQUEST['user_type'] = !empty($_REQUEST['user_type']) ? $_REQUEST['user_type'] : AffiliateUserTypes::PARTNER; list($payouts, $search) = fn_get_payouts($_REQUEST, Registry::get('settings.Appearance.admin_elements_per_page')); list($partner_list) = fn_get_users( [ 'user_type' => AffiliateUserTypes::PARTNER, 'active' => 'Y', 'approved' => UserStatuses::APPROVED ], $auth ); $_partner_list = []; foreach ($partner_list as $partner_data) { if (!empty($partner_data['firstname']) || !empty($partner_data['lastname'])) { $_partner_list[$partner_data['user_id']] = $partner_data['firstname'] . ' ' . $partner_data['lastname'] . ' (' . __("user_id") . ': ' . $partner_data['user_id'] . ') '; }else { $_partner_list[$partner_data['user_id']] = __("affiliate") . '_' . $partner_data['user_id']; } } Tygh::$app['view']->assign([ 'payouts' => $payouts, 'search' => $search, 'partner_list' => $_partner_list, 'user_type' => $_REQUEST['user_type'] ]); } elseif ($mode == 'pay') { list($partner_balances, $search) = fn_pay_affiliates( $_REQUEST, Registry::get('settings.Appearance.admin_elements_per_page') ); Tygh::$app['view']->assign('partner_balances', $partner_balances); Tygh::$app['view']->assign('search', $search); $payment_period_options = Settings::instance()->getVariants('sd_affiliate', 'payment_period'); Tygh::$app['view']->assign('period_name', $payment_period_options[Registry::get('addons.sd_affiliate.payment_period')]); } elseif ($mode == 'add') { list($new_payouts, $search) = fn_add_payouts($_REQUEST); Tygh::$app['view']->assign('payouts', $new_payouts); Tygh::$app['view']->assign('search', $search); } elseif ($mode == 'update' && !empty($_REQUEST['payout_id'])) { $user_type = !empty($_REQUEST['user_type']) ? $_REQUEST['user_type'] : AffiliateUserTypes::PARTNER; list($payout_data, $search) = sd_YjQyZGU1YWFkMDc4OTkzNzU2OGYzOThj($_REQUEST['payout_id'], $user_type); if (empty($payout_data)) { return [CONTROLLER_STATUS_NO_PAGE]; } Tygh::$app['view']->assign([ 'payouts' => [$payout_data['partner_id'] => $payout_data], 'search' => $search, 'user_type' => $payout_data['partner']['user_type'] ]); } elseif ($mode == 'previous') { $user_type = empty($_REQUEST['user_type']) ? AffiliateUserTypes::PARTNER : $_REQUEST['user_type']; if (Registry::get('addons.sd_affiliate.allow_all_customers_be_affiliates') == 'Y') { Registry::set('navigation.dynamic.sections', [ AffiliateUserTypes::PARTNER => [ 'title' => __('affiliates'), 'href' => 'payouts.previous?user_type=P', ], AffiliateUserTypes::CUSTOMER => [ 'title' => __('addons.sd_affiliate.usual_customers'), 'href' => 'payouts.previous?user_type=C', ] ]); Registry::set('navigation.dynamic.active_section', $user_type); } if (empty($_REQUEST['user_type'])) { $_REQUEST['user_type'] = AffiliateUserTypes::PARTNER; } list($payouts, $search, $max_amount) = fn_get_previous_payouts( $_REQUEST, Registry::get('settings.Appearance.admin_elements_per_page') ); Tygh::$app['view']->assign([ 'payouts' => $payouts, 'search' => $search, 'max_amount' => $max_amount, 'user_type' => $user_type ]); } elseif ($mode == 'delete') { if (!empty($_REQUEST['payout_id'])) { fn_delete_affiliate_payout($_REQUEST['payout_id']); } return [CONTROLLER_STATUS_REDIRECT, 'payouts.manage']; } function fn_delete_affiliate_payout($payout_id) { $_payout_data = db_get_row('SELECT * FROM ?:affiliate_payouts WHERE payout_id = ?i', $payout_id); $_amount = floatval($_payout_data['amount']); $_partner = sd_YzMyYjYwOWYwODE2NWUyZGM5NjE2Zjk5($_payout_data['partner_id'], true); if (!empty($_amount) && !empty($_partner['user_id'])) { if (sd_YTNhYmE0MTM3MjU4ODc1MWFlZTIzNjE1($_partner['user_id'], $_amount, '+')) { db_query('UPDATE ?:aff_partner_actions SET ?u WHERE payout_id = ?i', ['payout_id' => '0'], $payout_id); db_query('DELETE FROM ?:affiliate_payouts WHERE payout_id = ?i', $payout_id); } } } function fn_get_payouts($params, $items_per_page = 0) { $params = LastView::instance()->update('payouts', $params); $default_params = [ 'page' => 1, 'items_per_page' => $items_per_page ]; $params = array_merge($default_params, $params); $fields = [ 'aff_pay.*', '?:users.firstname', '?:users.lastname', '?:users.email', '?:users.user_type' ]; $sortings = [ 'id' => "aff_pay.payout_id", 'email' => '?:users.email', 'partner' => "CONCAT(?:users.lastname, ?:users.firstname)", 'amount' => "aff_pay.amount", 'date' => "aff_pay.date", 'status' => "aff_pay.status", ]; $sorting = db_sort($params, $sortings, 'date', 'desc'); $join = $condition = ''; if (!empty($params['name'])) { $condition .= db_quote( ' AND (?:users.firstname LIKE ?l OR ?:users.lastname LIKE ?l)', "%$params[name]%", "%$params[name]%" ); } if (!empty($params['email'])) { $condition .= db_quote(' AND ?:users.email LIKE ?l', "%$params[email]%"); } if (!empty($params['partner_id'])) { $condition .= db_quote(' AND aff_pay.partner_id = ?i', $params['partner_id']); } if (!empty($params['period']) && $params['period'] != 'A') { list($params['time_from'], $params['time_to']) = fn_create_periods($params); $condition .= db_quote( ' AND (aff_pay.date >= ?i AND aff_pay.date <= ?i)', $params['time_from'], $params['time_to'] ); } if (!empty($params['status'])) { $condition .= db_quote(' AND aff_pay.status = ?s', $params['status']); } if (isset($params['amount_from']) && fn_is_numeric($params['amount_from'])) { $condition .= db_quote(' AND aff_pay.amount >= ?d', trim($params['amount_from'])); } if (isset($params['amount_to']) && fn_is_numeric($params['amount_to'])) { $condition .= db_quote(' AND aff_pay.amount <= ?d', trim($params['amount_to'])); } if (!empty($params['user_type'])) { $condition .= db_quote(' AND ?:users.user_type = ?s', $params['user_type']); } if (fn_allowed_for('ULTIMATE')) { $condition .= fn_get_company_condition('aff_pay.company_id'); } $limit = ''; if ($params['user_type'] == AffiliateUserTypes::PARTNER) { if (!empty($params['items_per_page'])) { $params['total_items'] = db_get_field( 'SELECT COUNT(*)' . ' FROM ?:affiliate_payouts AS aff_pay' . ' LEFT JOIN ?:users ON aff_pay.partner_id = ?:users.user_id' . ' WHERE 1 ?p', $condition ); $limit = db_paginate($params['page'], $params['items_per_page']); } $payouts = db_get_hash_array( 'SELECT ?p' . ' FROM ?:affiliate_payouts AS aff_pay' . ' LEFT JOIN ?:users ON aff_pay.partner_id = ?:users.user_id' . ' WHERE 1 ?p ?p ?p', 'payout_id', implode(', ', $fields), $condition, $sorting, $limit); } else { if (!empty($params['items_per_page'])) { $params['total_items'] = db_get_field( 'SELECT COUNT(*)' . ' FROM ?:aff_customer_payouts AS aff_pay' . ' LEFT JOIN ?:users ON aff_pay.partner_id = ?:users.user_id' . ' WHERE 1 ?p', $condition ); $limit = db_paginate($params['page'], $params['items_per_page']); } $payouts = db_get_hash_array( 'SELECT ?p' . ' FROM ?:aff_customer_payouts AS aff_pay' . ' LEFT JOIN ?:users ON aff_pay.partner_id = ?:users.user_id' . ' WHERE 1 ?p ?p ?p', 'payout_id', implode(', ', $fields), $condition, $sorting, $limit ); } foreach ($payouts as $payout_id => $payout) { $payouts[$payout_id]['user_type'] = fn_get_request_user_type(['user_id' => $payout['partner_id']]); $payouts[$payout_id]['partner_exists'] = sd_ZTA2MDljZTM0NjkzMzU4NWIzNmQ2ZjRm($payout['partner_id']); if (!empty($payout['firstname']) || !empty($payout['lastname'])) { $payouts[$payout_id]['affiliate'] = $payout['firstname'] . ' ' . $payout['lastname']; } else { $payouts[$payout_id]['affiliate'] = __("affiliate") . '_' . $payout['partner_id']; } } LastView::instance()->processResults('payouts', $payouts, $params); return [$payouts, $params]; } function fn_pay_affiliates($params, $items_per_page = 0) { $params = LastView::instance()->update('pay_affiliates', $params); $default_params = [ 'page' => 1, 'items_per_page' => $items_per_page ]; $params = array_merge($default_params, $params); $sortings = [ 'user_id' => 'partner_id', 'email' => 'email', 'partner' => 'firstname', 'amount' => 'amount', 'date' => 'date' ]; $dirs = [ 'asc' => 'asc', 'desc' => 'desc' ]; if (empty($params['sort_order']) || empty($dirs[$params['sort_order']])) { $sorting_direction = 'asc'; } else { $sorting_direction = $dirs[$params['sort_order']]; } $sorting = db_sort($params, $sortings, 'user_id', 'asc'); $pay_filter = []; $pay_filter['min_payment'] = empty($params['min_payment']) ? '' : 'Y'; $pay_filter['last_payout'] = empty($params['last_payout']) ? '' : 'Y'; $pay_filter['amount_from'] = empty($params['amount_from']) ? '' : floatval($params['amount_from']); $pay_filter['amount_to'] = empty($params['amount_to']) ? '' : floatval($params['amount_to']); Tygh::$app['session']['pay_filter'] = $pay_filter; $join = $condition = $group = ''; $having = []; if (!empty($params['min_payment'])) { $having[] = 'SUM(pa.amount) >= AVG(ap.min_payment)'; } if (isset($params['amount_from']) && fn_is_numeric($params['amount_from'])) { $having[] = db_quote('SUM(pa.amount) >= ?d', $params['amount_from']); } if (isset($params['amount_to']) && fn_is_numeric($params['amount_to'])) { $having[] = db_quote('SUM(pa.amount) <= ?d', $params['amount_to']); } if (!empty($params['last_payout'])) { $condition .= db_quote(' AND pa.date > ?i', fn_parse_date(sd_NDRiZTU3NTM1NGViY2M0ZDljN2Y3MzA5(), true)); } if (fn_allowed_for('ULTIMATE')) { $condition .= fn_get_company_condition('pa.company_id'); } $group = 'GROUP BY pa.partner_id' . (empty($having) ? ' ' : ' HAVING (' . implode(') AND (', $having) . ') '); $limit = ''; if (!empty($params['items_per_page'])) { $params['total_items'] = count(db_get_fields( 'SELECT COUNT(DISTINCT(pa.partner_id))' . ' FROM ?:aff_partner_actions as pa' . ' LEFT JOIN ?:aff_partner_profiles as pp ON pa.partner_id = pp.user_id' . ' LEFT JOIN ?:affiliate_plans as ap ON ap.plan_id = pp.plan_id' . ' WHERE pa.approved = ?s AND pa.payout_id = 0 ?p ?p', 'Y', $condition, $group) ); $limit = db_paginate($params['page'], $params['items_per_page']); } $partner_balances = db_get_hash_array( 'SELECT pa.partner_id, u.firstname, u.lastname, u.email, SUM(amount) as amount' . ' FROM ?:aff_partner_actions as pa' . ' LEFT JOIN ?:users as u ON pa.partner_id = u.user_id' . ' LEFT JOIN ?:aff_partner_profiles as pp ON pa.partner_id = pp.user_id' . ' LEFT JOIN ?:affiliate_plans as ap ON ap.plan_id = pp.plan_id' . ' WHERE pa.approved = ?s AND payout_id = ?i ?p ?p ?p ?p', 'partner_id', 'Y', 0, $condition, $group, $sorting, $limit ); foreach ($partner_balances as $balance_id => $balance) { $partner_balances[$balance_id]['user_type'] = fn_get_request_user_type(['user_id' => $balance['partner_id']]); $partner_balances[$balance_id]['partner_exists'] = sd_ZTA2MDljZTM0NjkzMzU4NWIzNmQ2ZjRm($balance['partner_id']); if (!empty($balance['firstname']) || !empty($balance['lastname'])) { $partner_balances[$balance_id]['affiliate'] = $balance['firstname'] . ' ' . $balance['lastname']; } else { $partner_balances[$balance_id]['affiliate'] = __("affiliate") . '_' . $balance['partner_id']; } } $_partners = db_get_hash_array( 'SELECT pa.partner_id, SUM(amount) as amount' . ' FROM ?:aff_partner_actions as pa' . ' LEFT JOIN ?:aff_partner_profiles as pp ON pa.partner_id = pp.user_id' . ' LEFT JOIN ?:affiliate_plans as ap ON ap.plan_id = pp.plan_id' . ' WHERE pa.approved = ?s AND payout_id = 0' . ' GROUP BY pa.partner_id ORDER BY amount ?p', 'partner_id', 'N', $sorting_direction ); $last_payout_dates = db_get_hash_array( 'SELECT partner_id, MAX(date) as date' . ' FROM ?:affiliate_payouts' . ' GROUP BY partner_id ORDER BY date ?p', 'partner_id', $sorting_direction ); if ($params['sort_by'] != 'date' && $params['sort_by'] != 'awaiting_amount') { foreach ($partner_balances as $_partner_id => $_partner_data) { $partner_balances[$_partner_id]['awaiting_amount'] = empty($_partners[$_partner_id]['amount']) ? '' : floatval($_partners[$_partner_id]['amount']); $partner_balances[$_partner_id]['last_payout_date'] = @$last_payout_dates[$_partner_id]['date']; } } else { $temp_balances = []; if ($params['sort_by'] == 'awaiting_amount') { foreach ($_partners as $_partner_id => $_partner_data) { if (!empty($partner_balances[$_partner_id])) { $temp_balances[$_partner_id] = $partner_balances[$_partner_id]; $temp_balances[$_partner_id]['awaiting_amount'] = floatval($_partner_data['amount']); $temp_balances[$_partner_id]['last_payout_date'] = @$last_payout_dates[$_partner_id]['date']; unset($partner_balances[$_partner_id]); } } } else { foreach ($last_payout_dates as $_partner_id => $_date) { if (!empty($partner_balances[$_partner_id])) { $temp_balances[$_partner_id] = $partner_balances[$_partner_id]; $temp_balances[$_partner_id]['awaiting_amount'] = empty($_partners[$_partner_id]['amount']) ? '' : floatval($_partners[$_partner_id]['amount']); $temp_balances[$_partner_id]['last_payout_date'] = $_date['date']; unset($partner_balances[$_partner_id]); } } } $temp_balances2 = []; foreach ($partner_balances as $_partner_id => $_partner_data) { $temp_balances2[$_partner_id] = $_partner_data; $temp_balances2[$_partner_id]['awaiting_amount'] = empty($_partners[$_partner_id]['amount']) ? '' : floatval($_partners[$_partner_id]['amount']); $temp_balances2[$_partner_id]['last_payout_date'] = @$last_payout_dates[$_partner_id]['date']; } $partner_balances = $sorting_direction == 'desc' ? $temp_balances + $temp_balances2 : $temp_balances2 + $temp_balances; } return [$partner_balances, $params]; } function fn_add_payouts($params, $lang_code = CART_LANGUAGE) { $params = LastView::instance()->update('pay_affiliates', $params); $sortings = [ 'action' => "actions.action", 'date' => "actions.date", 'cost' => "actions.amount", 'banner' => "banner", ]; $sorting = db_sort($params, $sortings, 'date', 'desc'); $new_payouts = []; if (!empty($params['partner_ids'])) { $date_condition = ""; if (!empty($params['last_payout']) && !empty($params['time_from'])) { $date_condition = db_quote(' AND date < ?i', $params['time_from']); } foreach ($params['partner_ids'] as $_partner_id) { $condition = "1 " . $date_condition . db_quote( ' AND approved = ?s AND payout_id = 0 AND partner_id = ?i', 'Y', $_partner_id ); $new_payouts[$_partner_id]['amount'] = db_get_field( 'SELECT SUM(amount)' . ' FROM ?:aff_partner_actions' . ' WHERE ?p', $condition ); if (empty($new_payouts[$_partner_id]['amount'])) { unset($new_payouts[$_partner_id]); } else { $new_payouts[$_partner_id]['partner'] = sd_YzMyYjYwOWYwODE2NWUyZGM5NjE2Zjk5($_partner_id); if (!empty($new_payouts[$_partner_id]['partner']['plan_id'])) { $new_payouts[$_partner_id]['plan'] = sd_Y2M5OWY4ZDllM2MyODUxM2Q1N2VjYjA3( $new_payouts[$_partner_id]['partner']['plan_id'], $lang_code ); } $params['condition'] = $condition; $partner_action_fields = ['approved', 'payout_id', 'partner_id', 'date']; foreach($partner_action_fields as $field_name) { $params['condition'] = str_replace(' ' . $field_name, ' actions.' . $field_name, $params['condition']); } $params['user_type'] = AffiliateUserTypes::PARTNER; list($new_payouts[$_partner_id]['actions'], $params) = sd_MmMxMDg1NjBmYjhlY2NhZjA0M2ZmY2Q4( $params, Registry::get('settings.Appearance.admin_elements_per_page') ); $new_payouts[$_partner_id]['date_range']['min'] = db_get_field( 'SELECT MIN(date)' . ' FROM ?:aff_partner_actions' . ' WHERE ?p', $condition ); $new_payouts[$_partner_id]['date_range']['max'] = db_get_field( 'SELECT MAX(date)' . ' FROM ?:aff_partner_actions' . ' WHERE ?p', $condition ); } } } return [$new_payouts, $params]; } function fn_get_previous_payouts($params, $items_per_page = 0, $lang_code = DESCR_SL) { $default_params = [ 'page' => 1, 'items_per_page' => $items_per_page ]; $params = array_merge($default_params, $params); $sortings = [ 'user_id' => "partner_id", 'name' => "users.firstname", 'avg' => "avg_amount", 'total' => "total_amount", 'balance' => "p_profiles.balance", ]; $sorting = db_sort($params, $sortings, 'user_id', 'asc'); $limit = ''; $condition = db_quote('users.user_type = ?s', $params['user_type']); if (fn_allowed_for('ULTIMATE')) { $condition .= fn_get_company_condition('aff_pay.company_id'); } if (!empty($params['items_per_page'])) { if ($params['user_type'] == AffiliateUserTypes::PARTNER) { $params['total_items'] = db_get_field( 'SELECT COUNT(DISTINCT(aff_pay.partner_id))' . ' FROM ?:affiliate_payouts AS aff_pay' . ' LEFT JOIN ?:users AS users ON aff_pay.partner_id = users.user_id' . ' WHERE ?p', $condition ); } else { $params['total_items'] = db_get_field( 'SELECT COUNT(DISTINCT(aff_pay.partner_id))' . ' FROM ?:aff_customer_payouts AS aff_pay' . ' LEFT JOIN ?:users AS users ON aff_pay.partner_id = users.user_id' . ' WHERE ?p', $condition ); } $limit = db_paginate($params['page'], $params['items_per_page']); } if ($params['user_type'] == AffiliateUserTypes::PARTNER) { $previous_payouts = db_get_hash_array( 'SELECT aff_pay.partner_id, AVG(aff_pay.amount) as avg_amount, SUM(aff_pay.amount) as total_amount,' . ' users.firstname, users.lastname, users.email, p_profiles.balance' . ' FROM ?:affiliate_payouts as aff_pay' . ' LEFT JOIN ?:users as users ON aff_pay.partner_id = users.user_id' . ' LEFT JOIN ?:aff_partner_profiles as p_profiles ON aff_pay.partner_id = p_profiles.user_id' . ' WHERE ?p GROUP BY aff_pay.partner_id ?p ?p', 'partner_id', $condition, $sorting, $limit ); } else { $previous_payouts = db_get_hash_array( 'SELECT aff_pay.partner_id, AVG(aff_pay.amount) as avg_amount, SUM(aff_pay.amount) as total_amount,' . ' users.firstname, users.lastname, users.email, p_profiles.balance' . ' FROM ?:aff_customer_payouts as aff_pay' . ' LEFT JOIN ?:users as users ON aff_pay.partner_id = users.user_id' . ' LEFT JOIN ?:aff_partner_profiles as p_profiles ON aff_pay.partner_id = p_profiles.user_id' . ' WHERE ?p GROUP BY aff_pay.partner_id ?p ?p', 'partner_id', $condition, $sorting, $limit ); } $max_amount = 0; if (!empty($previous_payouts)) { if ($params['user_type'] == AffiliateUserTypes::PARTNER) { $_max_dates = db_get_array( 'SELECT aff_pay.partner_id, MAX(aff_pay.date) as max_date' . ' FROM ?:affiliate_payouts as aff_pay' . ' LEFT JOIN ?:users AS users ON users.user_id = aff_pay.partner_id' . ' WHERE ?p GROUP BY aff_pay.partner_id', $condition ); } else { $_max_dates = db_get_array( 'SELECT aff_pay.partner_id, MAX(aff_pay.date) as max_date' . ' FROM ?:aff_customer_payouts as aff_pay' . ' LEFT JOIN ?:users AS users ON users.user_id = aff_pay.partner_id' . ' WHERE ?p GROUP BY aff_pay.partner_id', $condition ); } $last_payouts = []; if (!empty($_max_dates)) { foreach ($_max_dates as $partner_max_date) { $_result = db_get_field( 'SELECT amount FROM ?:affiliate_payouts' . ' WHERE partner_id = ?i AND date = ?i', $partner_max_date['partner_id'], $partner_max_date['max_date'] ); if (!empty($_result)) { $last_payouts[$partner_max_date['partner_id']] = $_result; } } } foreach ($previous_payouts as $user_id => $prev_payout) { $previous_payouts[$user_id]['user_type'] = fn_get_request_user_type(['user_id' => $prev_payout['partner_id']]); $previous_payouts[$user_id]['partner_exists'] = sd_ZTA2MDljZTM0NjkzMzU4NWIzNmQ2ZjRm($prev_payout['partner_id']); $previous_payouts[$user_id]['last_amount'] = @$last_payouts[$user_id]; if ($max_amount < $previous_payouts[$user_id]['total_amount']) { $max_amount = $previous_payouts[$user_id]['total_amount']; } if (!empty($prev_payout['firstname']) || !empty($prev_payout['lastname'])) { $previous_payouts[$user_id]['affiliate'] = $prev_payout['firstname'] . ' ' . $prev_payout['lastname']; } else { $previous_payouts[$user_id]['affiliate'] = __("affiliate") . '_' . $user_id; } } } return [$previous_payouts, $params, $max_amount]; } 