<?php
 use Tygh\Enum\AmazonOrderStatuses; use Tygh\Languages\Languages; use Tygh\Addons\ProductVariations\Product\Manager as ProductManager; use Tygh\Addons\ProductVariations\ServiceProvider as VariatoinsService; use Tygh\Enum\ProductTracking; use Tygh\Registry; use Tygh\Http; use Tygh\Addons\SchemesManager; defined('BOOTSTRAP') or die('Access denied'); function fn_get_amazon_registration_notice() { return __('amazon_registration_notice'); } function fn_get_amazon_cron_notice() { $config = Registry::get('config'); $admin_index = $config['dir']['root'] . '/' . $config['admin_index']; return __('amazon_cron_notice', array( '[import_product_cron]' => "php * * */1 * * $admin_index --dispatch=amazon_products.import_cron --key=CRON_KEY --company_id=0", '[export_product_cron]' => "php * * */1 * * $admin_index --dispatch=amazon_products.export_cron --key=CRON_KEY --company_id=0", '[import_orders_cron]' => "php * * */1 * * $admin_index --dispatch=amazon_orders.import_cron --key=CRON_KEY", )); } function fn_get_reports($params = array(), $lang_code = CART_LANGUAGE, $items_per_page = 0) { $default_params = array( 'page' => 1, 'total_items' => 0, 'limit' => 0, 'items_per_page' => $items_per_page ); $params = array_merge($default_params, $params); $condition = $limit = ''; $fields = array('reports.*'); $joins = array(); fn_set_hook('sd_amz_get_reports_pre', $params, $fields, $joins, $items_per_page, $condition); if (!empty($params) && empty($params['sort_by'])) { $params = array_merge($params, fn_get_default_products_sorting()); } $sortings = array( 'datetime' => 'reports.datetime', 'null' => 'NULL' ); if (empty($params['sort_order'])) { $params['sort_order'] = 'asc'; } if (empty($sortings[$params['sort_by']])) { $params['sort_by'] = 'datetime'; } if (!empty($params['limit'])) { $limit = db_quote(" LIMIT 0, ?i", $params['limit']); } elseif (!empty($params['items_per_page'])) { $limit = db_paginate($params['page'], $params['items_per_page']); } if (!empty($params['period']) && $params['period'] != 'A') { list($params['time_from'], $params['time_to']) = fn_create_periods($params); $condition .= db_quote(" AND (reports.datetime >= ?i AND reports.datetime <= ?i)", $params['time_from'], $params['time_to']); } if (!empty($params['feed_id'])) { $condition .= db_quote(" AND reports.feed_id = ?s", $params['feed_id']); } if (!empty($params['sync_type'])) { if ($params['sync_type'] == AMAZON_SYNC_TYPE_EXPORT) { $condition .= db_quote(" AND reports.sync_type = ?s", AMAZON_SYNC_TYPE_EXPORT); } elseif ($params['sync_type'] == AMAZON_SYNC_TYPE_IMPORT) { $condition .= db_quote(" AND reports.sync_type = ?s", AMAZON_SYNC_TYPE_IMPORT); } } $sorting = db_sort($params, $sortings); $fields = implode(', ', $fields); $joins = implode(' ', $joins); fn_set_hook('sd_amz_get_reports', $fields, $joins, $limit, $params, $sorting, $condition); $report_list = db_get_array("SELECT {$fields} FROM ?:amazon_reports AS reports {$joins} WHERE 1 {$condition} {$sorting} {$limit}"); if (!empty($params['items_per_page'])) { $params['total_items'] = db_get_field("SELECT COUNT(*) FROM ?:amazon_reports AS reports {$joins} WHERE 1 {$condition}"); } return array($report_list, $params); } function fn_get_processing_report(array $params) { if (fn_is_empty(array($params['region'], $params['feed_id']))) { return false; } $amazon_config = fn_get_amazon_config($params['region']); $feed = new \AmazonFeedResult($amazon_config); $feed->setFeedId($params['feed_id']); $feed->fetchFeedResult(); $raw_xml = $feed->getRawFeed(); $xml_arr = json_decode(json_encode(simplexml_load_string($raw_xml)), true); $result_msg = & $xml_arr['Message']['ProcessingReport']['Result']; fn_set_hook('sd_amz_get_processing_report', $raw_xml, $xml_arr); if (!empty($xml_arr['Message']) && !empty($result_msg['AdditionalInfo'])) { $result_msg = array($result_msg); } return $xml_arr; } function fn_remove_report($report_ids) { if (!empty($report_ids)) { return db_query('DELETE FROM ?:amazon_reports WHERE report_id IN (?n)', $report_ids); } } function fn_amazon_create_features($product_id, $variations) { $features = array_reduce($variations, function ($acc, $variant) { foreach ($variant as $feature_name => $feature_value) { if ($feature_name != 'Identifiers') { $acc[$feature_name][] = $feature_value; } } return $acc; }, array()); $feature_schema = fn_get_schema('amazon_products', 'feature_params'); foreach ($features as $feature_name => $feature_values) { $params = $feature_schema; $params['description'] = $feature_name; $feature_id = fn_update_product_feature($params, 0); if (fn_allowed_for('ULTIMATE')) { $product_company_ids = fn_ult_get_shared_product_companies($product_id); foreach ($product_company_ids as $product_company_id) { fn_amazon_share_feature($feature_id, $product_company_id); } } if (!$feature_id) { return false; } foreach ($feature_values as $key => $feature_value) { $variant = array( 'position' => $key, 'variant' => $feature_value, 'description' => '', 'page_title' => '', 'url' => '', 'meta_description' => '', 'meta_keywords' => '', 'feature_id' => $feature_id, ); $variant_id = fn_add_feature_variant($feature_id, $variant); if (!$variant_id) { return false; } } } $feature_data = fn_get_product_feature_data($feature_id, true, false); $feature_variants = array_keys($feature_data['variants']); $is_features_updated = fn_update_product_features_value( $product_id, array($feature_id => reset($feature_variants)), array(), DESCR_SL ); if ($is_features_updated) { return array( 'features' => array( $feature_id => $feature_variants ), 'feature_id' => $feature_id, 'additional_features' => array_slice($feature_variants, 1) ); } return false; } function fn_amazon_share_feature($feature_id, $company_id) { static $feature = array(); if (!isset($feature[$company_id . '_' .$feature_id]) && !fn_check_shared_company_id('product_features', $feature_id, $company_id) ) { fn_ult_update_share_object($feature_id, 'product_features', $company_id); $feature[$company_id . '_' .$feature_id] = true; } } function fn_amazon_import_variant_products( array $product_ids, $amazon_settings, $market_lang = DESCR_SL ) { if (empty($product_ids) || $amazon_settings['sync_variations'] != 'Y' || Registry::get('addons.product_variations.status') != 'A' ) { return false; } $sku_list = db_get_hash_array( 'SELECT product_id, amz_sku, amz_asin, company_id FROM ?:products' . ' WHERE amz_sku != ?s AND product_id IN (?n)', 'product_id', '', $product_ids ); if (empty($sku_list)) { return false; } foreach ($sku_list as $pid => $sku) { $amazon_config = fn_get_amazon_config($market_lang); $amazon_product = new \AmazonProductList($amazon_config); if (!empty($sku['amz_asin'])) { $amazon_product->setIdType('ASIN'); $amazon_product->setProductIds($sku['amz_asin']); } else { $amazon_product->setIdType('SellerSKU'); $amazon_product->setProductIds($sku['amz_sku']); } $amazon_product->fetchProductList(); $imported_product = $amazon_product->getProduct(); if (!isset($imported_product['Error'])) { $imported_product = reset($imported_product); $imported_product = $imported_product->getData(); if ($amazon_settings['sync_name'] == 'Y') { $attributes = reset($imported_product['AttributeSets']); db_query( 'UPDATE ?:product_descriptions SET product = ?s' . ' WHERE product_id = ?i AND lang_code = ?s', $attributes['Title'], $pid, CART_LANGUAGE ); } if (!(isset($imported_product['Relationships']['VariationChild']) || isset($imported_product['Relationships']['VariationParent'])) ) { continue; } if (isset($imported_product['Relationships']['VariationParent'])) { sleep(1); $product_ids = fn_amazon_import_variation_product( $pid, $imported_product, $market_lang ); } else { $product_ids = fn_amazon_import_variation_group($pid, $imported_product); } } else { fn_set_notification('E', __('error'), $imported_product['Error']); } } return $product_ids; } function fn_amazon_import_variation_group($product_id, $imported_product) { $variation_service = VariatoinsService::getService(); $group_repository = VariatoinsService::getGroupRepository(); $group_id = $group_repository->findGroupIdByProductId($product_id); if ($group_id) { $products = fn_amazon_update_variation_group( $product_id, $group_id, $group_repository, $imported_product, $variation_service ); } else { if (!empty($imported_product['Relationships']['VariationChild'])) { fn_set_notification('E', __('error'), __('sd_amz_no_products_in_variation', ['[product_id]' => $product_id])); return false; } $options = reset($imported_product['Relationships']['VariationChild']); unset($options['Identifiers']); $feature_variants = fn_amazon_create_features( $product_id, $imported_product['Relationships']['VariationChild'] ); $feature_variants = isset($feature_variants['additional_features']) ? $feature_variants : array('additional_features' => array()); $result = $variation_service->generateProductsAndCreateGroup( $product_id, $feature_variants['additional_features'] ); if (!$result->isSuccess()) { $error = $result->getFirstError(); fn_set_notification('E', __('error'), $error); return false; } $group = $result->getData()['group']; $group->setCode($imported_product['Identifiers']['MarketplaceASIN']['ASIN']); $group_repository->updateCode($group); fn_amazon_set_variation_asin($imported_product, $group, $feature_variants); $products = $group->getProducts()->getProducts(); } return array_keys($products); } function fn_amazon_import_variation_product($product_id, $imported_product, $market_lang) { $amazon_config = fn_get_amazon_config($market_lang); $amazon_product = new \AmazonProductList($amazon_config); $parent_product = reset($imported_product['Relationships']['VariationParent']); $asin = $parent_product['Identifiers']['MarketplaceASIN']['ASIN']; $amazon_product->setIdType('ASIN'); $amazon_product->setProductIds($asin); $amazon_product->fetchProductList(); $imported_product = $amazon_product->getProduct(); if (!isset($imported_product['Error'])) { $imported_product = reset($imported_product); $imported_product = $imported_product->getData(); $product_ids = fn_amazon_import_variation_group($product_id, $imported_product); } else { fn_set_notification('E', __('error'), $imported_product['Error']); return false; } return $product_ids; } function fn_amazon_update_variation_group( $product_id, $group_id, $group_repository, $imported_product, $variation_service ) { $group = $group_repository->findGroupById($group_id); $feautre_ids = $group->getFeatureIds(); $feature_id = reset($feautre_ids); $feature_name = fn_get_feature_name($feature_id); $child = reset($imported_product['Relationships']['VariationChild']); $is_current_feature = isset($child[$feature_name]); if (!$is_current_feature) { return false; } $feature_data = fn_get_product_feature_data($feature_id, true, false); $feature_variants = array_map(function ($variant) { return $variant['variant']; }, $feature_data['variants']); $imported_feature_variants = array_map(function ($feature) use ($feature_name) { return $feature[$feature_name]; }, $imported_product['Relationships']['VariationChild']); $new_variants = array_diff($imported_feature_variants, $feature_variants); if (!empty($new_variants)) { $ids = fn_sd_amazon_add_new_feature_variant( $product_id, $group_id, $feature_id, $new_variants, $variation_service, $feature_data ); } if (empty($ids)) { $ids = $group->getProducts()->getProducts(); } return $ids; } function fn_sd_amazon_add_new_feature_variant( $product_id, $group_id, $feature_id, $new_variants, $variation_service, $feature_data ) { foreach ($new_variants as $new_variant) { $variant = array( 'variant' => $new_variant, 'description' => '', 'page_title' => '', 'meta_description' => '', 'meta_keywords' => '', 'lang_code' => DESCR_SL, 'url' => '', 'feature_id' => $feature_id, ); $feature_data['variants'][] = $variant; } fn_update_product_feature_variants($feature_id, $feature_data, DESCR_SL); $variant_ids = array_keys($feature_data['variants']); $result = $variation_service->generateProductsAndAttachToGroup( $group_id, $product_id, $variant_ids ); if (!$result->isSuccess()) { return false; } $group = $result->getData()['group']; $ids = $group->getProducts()->getProducts(); return $ids; } function fn_amazon_set_variation_asin($imported_product, $group, $feature_variants) { if (empty($imported_product) || empty($feature_variants)) { return false; } $products = $group->getProducts()->getProducts(); foreach ($products as $product_object) { $features = $product_object->getFeatureValues(); $variant_id = $features[$feature_variants['feature_id']]->getVariantId(); $variant_name = fn_get_product_feature_variant($variant_id, 'en')['variant']; foreach ($imported_product['Relationships']['VariationChild'] as $child) { $current_feature = array_filter( $child, function ($feature) use ($variant_name) { return $variant_name == $feature; } ); if ($current_feature) { $product_asin = $child['Identifiers']['MarketplaceASIN']['ASIN']; fn_amazon_set_asin($product_asin, $product_object->getProductId()); fn_amazon_delete_sku($product_object->getProductId()); break; } } } return true; } function fn_amazon_set_asin($product_asin, $product_id) { db_query( 'UPDATE ?:products SET amz_asin = ?s WHERE product_id = ?i', $product_asin, $product_id ); } function fn_amazon_delete_sku($product_id) { db_query( 'UPDATE ?:products SET amz_sku = ?s WHERE product_id = ?i', '', $product_id ); } function fn_amazon_import_products(array $product_ids, $market_lang = 'us', $mode = 'web') { $report_id = 0; $product_ids = array_filter($product_ids); $broken_products = $correct_products = $imported_attrs = array(); $amazon_config = fn_get_amazon_config($market_lang); $amazon_settings = Registry::get('addons.sd_amazon_products'); $product_ids = fn_amazon_import_variant_products($product_ids, $amazon_settings, $market_lang); if ($amazon_settings['sync_quantity'] != 'Y' && $amazon_settings['sync_price'] != 'Y') { return $mode == 'web' ? NEED_REDIRECT : true; } fn_set_progress('parts', count($product_ids) + 3); $request = new \AmazonReportRequest($amazon_config); $request->setReportType('_GET_MERCHANT_LISTINGS_DATA_'); $request->requestReport(); $report_request_id = $request->getReportRequestId(); fn_set_progress('echo', __('sd_amz_request_merchant_data') . PHP_EOL); sleep(1); if (empty($report_request_id)) { fn_set_notification('E', __('error'), __('access_denied')); return false; } $request_list = new \AmazonReportRequestList($amazon_config); $request_list->setUseToken(); $request_list->setRequestIds($report_request_id); $request_list->fetchRequestList(); $request_status = $request_list->getStatus(); fn_set_progress('echo', __('sd_amz_fetching_list_reports') . PHP_EOL); if ($request_status == '_IN_PROGRESS_' || $request_status == '_SUBMITTED_') { sleep(AMAZON_REPORT_TIME_LIMIT); $request_list->fetchRequestList(); $request_status = $request_list->getStatus(); if ($request_status == '_DONE_') { $report_id = $request_list->getReportId(); } else { fn_set_notification('E', 'Throttled by Amazon', 'You exceeded your quota of requests'); return false; } } $report = new \AmazonReport($amazon_config); $report->setReportId($report_id); $report->fetchReport(); $raw_csv = $report->getRawReport(); fn_set_progress('echo', __('sd_amz_fetching_inventory_reports') . PHP_EOL); sleep(1); if (empty($raw_csv)) { fn_set_notification('E', __('error'), __('sd_amz_incorrect_csv_structure')); return false; } $csv_array = $outdated_attributes = array(); $raw_csv = explode("\n", rtrim($raw_csv)); $csv_report = array_map('str_getcsv', $raw_csv, array_fill(0, count($raw_csv), "\t")); $csv_keys = array_shift($csv_report); foreach ($csv_report as $i => $row) { $csv_report[$i] = array_combine($csv_keys, $row); } $seller_sku_list = array_column($csv_report, 'seller-sku'); $seller_asin_list = array_column($csv_report, 'asin1'); $existing_sku_product_ids = db_get_hash_array('SELECT product_id, amz_sku FROM ?:products WHERE amz_sku IN (?a)', 'amz_sku', $seller_sku_list); $existing_asin_variant_product_ids = db_get_hash_array( 'SELECT product_id, amz_asin FROM ?:products' . ' WHERE amz_asin IN (?a) AND product_id IN (?n)', 'amz_asin', $seller_asin_list, $product_ids ); foreach ($csv_report as $product_data) { if (!empty($product_data['seller-sku']) && isset($existing_sku_product_ids[$product_data['seller-sku']]) && !empty($existing_sku_product_ids[$product_data['seller-sku']])) { $product_id = $existing_sku_product_ids[$product_data['seller-sku']]['product_id']; $csv_array[$product_id] = $product_data; } } foreach ($csv_report as $product_data) { if (!empty($product_data['asin1']) && isset($existing_asin_variant_product_ids[$product_data['asin1']]) && !empty($existing_asin_variant_product_ids[$product_data['asin1']])) { $product_id = $existing_asin_variant_product_ids[$product_data['asin1']]['product_id']; $csv_array[$product_id] = $product_data; db_query('UPDATE ?:products SET amz_sku = ?s WHERE product_id = ?i', $product_data['seller-sku'], $product_id); } } foreach ($product_ids as $key => $product_id) { $product_name = fn_get_product_name($product_id, CART_LANGUAGE); if (empty($csv_array[$product_id])) { $broken_products[$product_id] = $product_name; unset($product_ids[$key]); } } $product_data = db_get_hash_array( "SELECT price, ?:products.product_id, product_code, amount, product, amz_sku, amz_asin, amz_item_is_marketplace " . "FROM ?:products " . "LEFT JOIN ?:product_prices ON ?:product_prices.product_id = ?:products.product_id " . "LEFT JOIN ?:product_descriptions ON ?:product_descriptions.product_id = ?:products.product_id " . "WHERE ?:products.product_id IN (?n)", 'product_id', $product_ids); fn_set_hook('sd_amz_import_amazon_products', $csv_array, $product_data, $raw_csv, $broken_products); foreach ($product_data as $product_id => $product) { if (fn_is_empty(array($product['amz_sku'], $product['product_code']))) { fn_set_notification('E', __('error'), __('sd_amz_set_keys', array( '[product]' => htmlspecialchars($product['product'])) )); exit; } fn_set_progress('echo', __('sd_amz_check_product', array( '[product]' => htmlspecialchars($product['product'])) ) . PHP_EOL); if ($product['amz_sku'] == $csv_array[$product_id]['seller-sku'] || $product['product_code'] == $csv_array[$product_id]['seller-sku']) { list($outdated_attributes[$product_id], $count_success, $count_skip, $count_fail) = fn_amazon_get_attributes_needed_synchronization($product, $csv_array[$product_id]); } } $filtered_outdated_attrs = array_filter($outdated_attributes); if (!empty($filtered_outdated_attrs)) { foreach ($filtered_outdated_attrs as $product_id => $attribute) { $correct_products[$product_id] = $product_data[$product_id]['product']; } $count_success = count($correct_products); $count_skip *= count($correct_products); $count_fail *= count($broken_products); foreach ($filtered_outdated_attrs as $id => $attribute) { $out = array(); fn_update_product($attribute, $id, DESCR_SL); foreach ($attribute as $key => $attr) { if ($key != 'amz_item_is_marketplace' && $key != 'amz_asin' && $key != 'amz_sku') { if ($key == 'product') { array_push($out, __('product_name')); } elseif ($key == 'amount') { array_push($out, __('products_amount')); } elseif ($key == 'price') { array_push($out, __('promotion_cond_price')); } } } $imported_attrs[$id] = implode(', ', $out); } $report_data['feed_id'] = uniqid(); $report_data['sync_type'] = AMAZON_SYNC_TYPE_IMPORT; $report_data['region'] = $market_lang; $report_data['quantity'] = count($correct_products) + count($broken_products); $report_data['datetime'] = TIME; $report_data['import_product_list'] = serialize(array( 'imported_attrs' => $imported_attrs, 'broken_products' => $broken_products, 'correct_products' => $correct_products, 'count_success' => $count_success, 'count_fail' => $count_fail, 'count_skip' => $count_skip )); fn_set_hook('sd_amz_import_product_post', $report_data, $imported_attrs, $correct_products, $broken_products); db_query('INSERT INTO ?:amazon_reports ?e', $report_data); if ($mode == 'web') { $smarty = Tygh::$app['view']; $smarty->assign('import_result', array( 'submission_id' => $report_data['feed_id'], 'report_url' => fn_url('amazon_reports.manage', 'A'), 'count_success' => $count_success, 'count_fail' => $count_fail, 'count_skip' => $count_skip, 'imported_attrs' => $imported_attrs, 'broken_products' => $broken_products, 'correct_products' => $correct_products, )); fn_set_notification( 'I', __('sd_amz_import_complete'), $smarty->fetch('addons/sd_amazon_products/views/amazon_products/components/import_summary.tpl') ); } elseif ($mode == 'cron') { fn_echo(PHP_EOL . "\033[42m " . __('sd_amz_import_success_msg') . "\033[0m" . PHP_EOL); if (!empty($correct_products)) { $mask = "|%5.5s |%-40.40s |%-40.40s \n"; printf($mask, __('id'), __('title'), __('sd_amz_imported')); foreach ($correct_products as $id => $product) { printf($mask, $id, $product, $imported_attrs[$id]); } } if (!empty($broken_products)) { $mask = "|%5.5s |%-50s \n"; printf(PHP_EOL . "\033[41m " . __('sd_amz_export_failed_import_msg') . "\033[0m" . PHP_EOL); printf($mask, __('id'), __('title')); foreach ($broken_products as $id => $product) { printf($mask, $id, $product); } } fn_echo(__('sd_amz_import_count_processed') . " {$count_success}" . PHP_EOL); fn_echo(__('sd_amz_import_count_skip') . " {$count_skip}" . PHP_EOL); fn_echo(__('sd_amz_import_count_fail') . " {$count_fail}" . PHP_EOL); } } if (empty($filtered_outdated_attrs)) { if ($mode == 'web') { fn_set_notification('I', __('notice'), __('sd_amz_no_products_for_sync')); } elseif ($mode == 'cron') { fn_echo(PHP_EOL . "\033[44m " . __('sd_amz_no_products_for_sync') . "\033[0m" . PHP_EOL); } } } function fn_amazon_get_attributes_needed_synchronization($cscart_product, $amazon_product) { $cscart_product_count = $cscart_product; unset( $cscart_product_count['product_id'], $cscart_product_count['product_code'], $cscart_product_count['amz_sku'], $cscart_product_count['amz_asin'], $cscart_product_count['amz_item_is_marketplace'] ); $addon = Tygh\Registry::get('addons.sd_amazon_products'); $outdated_attributes = array(); $count_success = 0; $attributes_count = $count_fail = count($cscart_product_count); if ($cscart_product['amz_sku'] != $amazon_product['seller-sku']) { $outdated_attributes['amz_sku'] = $amazon_product['seller-sku']; } if ($cscart_product['amz_item_is_marketplace'] != 'Y') { $outdated_attributes['amz_item_is_marketplace'] = 'Y'; } if ($cscart_product['amz_asin'] != $amazon_product['asin1']) { $outdated_attributes['amz_asin'] = $amazon_product['asin1']; } if ($addon['sync_name'] == 'Y' && trim($cscart_product['product']) != trim($amazon_product['item-name'])) { $count_success++; $attributes_count--; $outdated_attributes['product'] = $amazon_product['item-name']; } if ($addon['sync_quantity'] == 'Y' && $cscart_product['amount'] != $amazon_product['quantity']) { $count_success++; $attributes_count--; $outdated_attributes['amount'] = $amazon_product['quantity']; } if ($addon['sync_price'] == 'Y' && $cscart_product['price'] != $amazon_product['price']) { $count_success++; $attributes_count--; $outdated_attributes['price'] = $amazon_product['price']; } fn_set_hook('sd_amz_get_attributes_needed_synchronization_post', $cscart_product, $amazon_product, $outdated_attributes, $count_success); return array($outdated_attributes, $count_success, $attributes_count, $count_fail); } function fn_amazon_product_has_variation($product_ids) { if (!empty($product_ids)) { $variation_product_ids = array(); foreach ($product_ids as $product_id) { $variation_product_ids = db_get_fields('SELECT product_id FROM ?:products WHERE parent_product_id = ?i', $product_id); } if (!empty($variation_product_ids)) { $product_ids = array_merge($product_ids, $variation_product_ids); } } return $product_ids; } function fn_amazon_export_products(array $product_ids, $market_lang = 'us', $mode = 'web') { $submission_id = 0; $report_data = $feed_response = array(); $product_ids = array_filter($product_ids); $amazon_config = fn_get_amazon_config($market_lang); if (Registry::get('addons.product_variations.status') == 'A') { $product_ids = fn_amazon_product_has_variation($product_ids); } list($xml_feed, $broken_products, $correct_products) = fn_generate_schema_feed($product_ids, $amazon_config['merchantId']); $count_submitted = count($product_ids) - count($broken_products); $count_fail = count($broken_products); if ($count_fail >= 0 && $count_submitted >= 1) { $feed = new \AmazonFeed($amazon_config); $feed->setFeedType('_POST_PRODUCT_DATA_'); $feed->setFeedContent($xml_feed['product']); $feed->submitFeed(); $feed_response = $feed->getResponse(); if ($feed_response === false) { fn_set_notification('E', __('error'), __('sd_amz_export_failed_msg')); return false; } fn_set_progress('echo', __('sd_amz_sending_feed_to_amazon') . PHP_EOL); $feed->setFeedType('_POST_PRODUCT_PRICING_DATA_'); $feed->setFeedContent($xml_feed['pricing']); $feed->submitFeed(); $feed->setFeedType('_POST_INVENTORY_AVAILABILITY_DATA_'); $feed->setFeedContent($xml_feed['inventory']); $feed->submitFeed(); if (!empty($xml_feed['images'])) { $feed->setFeedType('_POST_PRODUCT_IMAGE_DATA_'); $feed->setFeedContent($xml_feed['images']); $feed->submitFeed(); } $report_data['feed_id'] = $feed_response['FeedSubmissionId']; $report_data['sync_type'] = AMAZON_SYNC_TYPE_EXPORT; $report_data['region'] = $market_lang; $report_data['quantity'] = $count_submitted; $report_data['datetime'] = TIME; fn_set_hook('sd_amz_export_product_post', $count_submitted, $feed_response, $report_data); $id = db_query('INSERT INTO ?:amazon_reports ?e', $report_data); $submission_id = !empty($feed_response['FeedSubmissionId']) ? $feed_response['FeedSubmissionId'] : 0; } if ($mode == 'web') { $smarty = Tygh::$app['view']; $smarty->assign('export_result', array( 'submission_id' => $submission_id, 'report_url' => fn_url('amazon_reports.manage', 'A'), 'count_submitted' => $count_submitted, 'count_fail' => $count_fail, 'broken_products' => $broken_products, 'correct_products' => $correct_products, )); fn_set_notification( 'I', __('sd_amz_export_complete'), $smarty->fetch('addons/sd_amazon_products/views/amazon_products/components/export_summary.tpl') ); } elseif ($mode == 'cron') { if ($count_fail >= 0 && $count_submitted >= 1) { $mask = "|%5.5s |%-50s \n"; fn_echo(PHP_EOL . "\033[44m " . __('sd_amz_export_info_msg', array('[id]' => $submission_id, '[url]' => fn_url('amazon_reports.manage', 'A'))) . "\033[0m" . PHP_EOL); if (!empty($correct_products)) { printf(PHP_EOL . "\033[42m " . __('sd_amz_export_success_msg') . "\033[0m" . PHP_EOL); printf($mask, __('id'), __('title')); foreach ($correct_products as $id => $product) { printf($mask, $id, $product); } } if (!empty($broken_products)) { printf(PHP_EOL . "\033[41m " . __('sd_amz_export_failed_export_msg') . "\033[0m" . PHP_EOL); printf($mask, __('id'), __('title')); foreach ($broken_products as $id => $product) { printf($mask, $id, $product); } } fn_echo(__('sd_amz_count_product_successfully_exported') . " {$count_submitted}" . PHP_EOL); fn_echo(__('sd_amz_count_product_fail_exported') . " {$count_fail}" . PHP_EOL); } else { printf(PHP_EOL . "\033[41m " . __('sd_amz_export_failed_export_msg') . "\033[0m" . PHP_EOL); exit; } } return true; } function fn_generate_schema_feed(array $product_ids, $merchant_id) { $feed = $broken_products = $correct_products = array(); array_unshift($product_ids, ''); unset($product_ids[0]); $addon_settings = Registry::get('addons.sd_amazon_products'); foreach ($product_ids as $key => $product_id) { $is_broken = false; $product = fn_get_product_data($product_id, Tygh::$app['session']['auth'], CART_LANGUAGE, '', false, true, false); if (fn_is_empty(array($product['amz_asin'], $product['amz_ean'], $product['amz_upc'], $product['amz_isbn']))) { $broken_products[$product_id] = $product['product']; $is_broken = true; } if ($is_broken) { unset($product_ids[$key]); continue; } } fn_set_progress('parts', count($product_ids) + 1); $xml_header = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <AmazonEnvelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"amzn-envelope.xsd\">
        <Header>
        <DocumentVersion>1.01</DocumentVersion>
        <MerchantIdentifier>{$merchant_id}</MerchantIdentifier>
    </Header>"; $xml_footer = '</AmazonEnvelope>'; $xml_product_feed = '<MessageType>Product</MessageType><PurgeAndReplace>false</PurgeAndReplace>'; $xml_price_feed = '<MessageType>Price</MessageType><PurgeAndReplace>false</PurgeAndReplace>'; $xml_inventory_feed = '<MessageType>Inventory</MessageType><PurgeAndReplace>false</PurgeAndReplace>'; if ($addon_settings['export_images_to_amazon'] == 'Y') { $xml_images_feed = '<MessageType>ProductImage</MessageType><PurgeAndReplace>false</PurgeAndReplace>'; } list($products_categories, $all_categories) = fn_sd_amazon_products_get_product_categories($product_ids); fn_set_hook('sd_amz_generate_feed_pre', $feed, $product_ids, $xml_header, $xml_footer, $xml_product_feed, $xml_price_feed, $xml_inventory_feed, $products_categories, $all_categories); $currency = Registry::get('currencies.' . CART_PRIMARY_CURRENCY . '.currency_code'); foreach ($product_ids as $key => $product_id) { $product = fn_get_product_data($product_id, Tygh::$app['session']['auth'], CART_LANGUAGE, '', true, true, false); $item_type = $condition_note = $condition = $condition_type = $rec_browse_node = ''; $correct_products[$product_id] = $product['product']; fn_set_progress('echo', __('sd_amz_create_product_feed', array( '[product]' => htmlspecialchars($product['product'])) ) . PHP_EOL); list($identifier_type, $identifier_value) = fn_get_product_ids($product); $sku_value = $product['product_code']; $product_name = fn_clean_strip_tags($product['product'], false); $product_desc = fn_clean_strip_tags($product['full_description'], false); $standard_price = $product['base_price']; if (!empty($product['amz_sku'])) { $sku_value = $product['amz_sku']; } if (!empty($product['amz_price']) && $product['amz_override_price'] == 'Y') { $standard_price = $product['amz_price']; } $amz_item_type = ''; $amz_browse_node = ''; if (!empty($product['amz_item_type'])) { $amz_item_type = $product['amz_item_type']; } if (!empty($product['amz_browse_node'])) { $amz_browse_node = $product['amz_browse_node']; } if (!empty($products_categories) && !empty($all_categories) && (empty($amz_item_type) || empty($amz_browse_node))) { $amz_categories_data = db_get_hash_array('SELECT category_id, amz_item_type, amz_browse_node FROM ?:categories WHERE category_id IN (?n)', 'category_id', $all_categories); if (isset($products_categories[$product_id])) { foreach (fn_sd_amazon_products_sort_array_by_key($products_categories[$product_id], SORT_DESC) as $category) { if (empty($amz_item_type) && !empty($amz_categories_data[$category]['amz_item_type'])) { $amz_item_type = $amz_categories_data[$category]['amz_item_type']; } if (empty($amz_browse_node) && !empty($amz_categories_data[$category]['amz_browse_node'])) { $amz_browse_node = $amz_categories_data[$category]['amz_browse_node']; } } } } if (!empty($amz_item_type)) { $item_type = "<ItemType>{$amz_item_type}</ItemType>"; } if (!empty($amz_browse_node)) { $result = preg_split('/[,; ]/', $amz_browse_node); if (is_array($result)) { foreach ($result as $browsenode) { if (empty($browsenode) || !is_numeric($browsenode)) { continue; } $rec_browse_node .= "<RecommendedBrowseNode>$browsenode</RecommendedBrowseNode>"; } } } if (!empty($product['amz_condition'])) { foreach (fn_get_amazon_conditions() as $key => $value) { if ($product['amz_condition'] == $key) { $condition_type = $value; } } if (!empty($product['amz_condition_note'])) { $condition_note = "<ConditionNote>{$product['amz_condition_note']}</ConditionNote>"; } $condition = <<<EOD
            <Condition>
                <ConditionType>{$condition_type}</ConditionType>
                {$condition_note}
            </Condition>
EOD;
} $product_data = ''; $xml_product_feed .= <<<EOD
        <Message>
        <MessageID>{$key}</MessageID>
        <OperationType>PartialUpdate</OperationType>
        <Product>
            <SKU>{$sku_value}</SKU>
            <StandardProductID>
                <Type>{$identifier_type}</Type>
                <Value>{$identifier_value}</Value>
            </StandardProductID>
            {$condition}
            <DescriptionData>
                <Title>{$product_name}</Title>
                <Description>{$product_desc}</Description>
                {$item_type}
                {$rec_browse_node}
            </DescriptionData>
            {$product_data}
        </Product>
        </Message>
EOD;
$xml_price_feed .= <<<EOD
        <Message>
        <MessageID>{$key}</MessageID>
        <OperationType>Update</OperationType>
        <Price>
            <SKU>{$sku_value}</SKU>
            <StandardPrice currency='{$currency}'>{$standard_price}</StandardPrice>
        </Price>
        </Message>
EOD;
$xml_inventory_feed .= <<<EOD
        <Message>
        <MessageID>{$key}</MessageID>
        <OperationType>Update</OperationType>
        <Inventory>
            <SKU>{$sku_value}</SKU>
            <Quantity>{$product['amount']}</Quantity>
        </Inventory>
        </Message>
EOD;
if ($addon_settings['export_images_to_amazon'] == 'Y') { $feed['images'] = array(); if (!empty($product['main_pair']['detailed']['image_path'])) { $main_image = $product['main_pair']['detailed']['image_path']; $feed['images'][] = "
                    <Message>
                        <MessageID>{$key}0</MessageID>
                        <OperationType>Update</OperationType>
                        <ProductImage>
                            <SKU>{$sku_value}</SKU>
                            <ImageType>Main</ImageType>
                            <ImageLocation>{$main_image}</ImageLocation>
                        </ProductImage>
                    </Message>
                "; } if (!empty($product['image_pairs'])) { $add_key = 0; foreach ($product['image_pairs'] as $image) { ++$add_key; $image = $image['detailed']['image_path']; $feed['images'][] = "
                        <Message>
                            <MessageID>{$key}{$add_key}</MessageID>
                            <OperationType>Update</OperationType>
                            <ProductImage>
                                <SKU>{$sku_value}</SKU>
                                <ImageType>PT{$add_key}</ImageType>
                                <ImageLocation>{$image}</ImageLocation>
                            </ProductImage>
                        </Message>
                    "; } } if (!empty($feed['images'])) { $xml_images_feed .= implode("\n", $feed['images']); $feed['images'] = $xml_header . <<<EOD
                    {$xml_images_feed}
EOD
. $xml_footer; } } } $feed['product'] = $xml_header . $xml_product_feed . $xml_footer; $feed['pricing'] = $xml_header . $xml_price_feed . $xml_footer; $feed['inventory'] = $xml_header . $xml_inventory_feed . $xml_footer; fn_set_hook('sd_amz_generate_feed_post', $feed, $xml_product_feed, $xml_price_feed, $xml_inventory_feed); return array($feed, $broken_products, $correct_products); } function fn_get_product_ids(array $product) { $identifier_type = $identifier_value = ''; switch ($product) { case fn_is_not_empty($product['amz_asin']): $identifier_type = 'ASIN'; $identifier_value = $product['amz_asin']; break; case fn_is_not_empty($product['amz_ean']): $identifier_type = 'EAN'; $identifier_value = $product['amz_ean']; break; case fn_is_not_empty($product['amz_upc']): $identifier_type = 'UPC'; $identifier_value = $product['amz_upc']; break; case fn_is_not_empty($product['amz_isbn']): $identifier_type = 'ISBN'; $identifier_value = $product['amz_isbn']; break; } return array($identifier_type, $identifier_value); } function fn_get_product_id_by_sku($sku = '') { fn_set_hook('sd_amz_get_product_id_by_sku_pre', $sku); $result = false; if (!empty($sku)) { if (!is_array($sku) && strpos($sku, ',') !== false) { $sku = explode(',', $sku); } $field_list = '?:products.product_id'; $join = ''; if (is_array($sku)) { $condition = db_quote(' AND ?:products.amz_sku IN (?n)', $sku); } else { $condition = db_quote(' AND ?:products.amz_sku = ?s', $sku); } fn_set_hook('sd_amz_get_product_id_by_sku', $sku, $field_list, $join, $condition); $result = db_get_field("SELECT {$field_list} FROM ?:products WHERE 1 {$condition}", $sku); } fn_set_hook('sd_amz_get_product_id_by_sku_post', $sku, $result); return $result; } function fn_sd_amazon_products_get_product_fields(&$fields) { $fields[] = array( 'name' => '[data][amz_asin]', 'text' => 'Amazon ' . __('amz_asin') ); $fields[] = array( 'name' => '[data][amz_sku]', 'text' => 'Amazon ' . __('amz_sku') ); $fields[] = array( 'name' => '[data][amz_ean]', 'text' => 'Amazon ' . __('amz_ean') ); $fields[] = array( 'name' => '[data][amz_upc]', 'text' => 'Amazon ' . __('amz_upc') ); $fields[] = array( 'name' => '[data][amz_isbn]', 'text' => 'Amazon ' . __('amz_isbn') ); $fields[] = array( 'name' => '[data][amz_item_type]', 'text' => __('amz_item_type') ); $fields[] = array( 'name' => '[data][amz_browse_node]', 'text' => 'Amazon ' . lcfirst(__('sd_amz_browse_node')) ); $fields[] = array( 'name' => '[data][amz_condition]', 'text' => 'Amazon ' . lcfirst(__('condition')) ); $fields[] = array( 'name' => '[data][amz_price]', 'text' => __('amz_price') ); $fields[] = array( 'name' => '[data][amz_synchronization]', 'text' => __('sd_amz_synchronization') ); } function fn_clean_strip_tags($text, $allow_restricted_html = true) { $text = str_replace(array('</li>', '</LI>'), "\n</li>", $text); $text = str_replace(array('<BR', '<br'), "\n<br", $text); $text = strip_tags($text); $text = str_replace('&#39;', "'", $text); $text = mb_convert_encoding($text, 'HTML-ENTITIES'); $text = str_replace('&nbsp;', ' ', $text); $text = html_entity_decode($text, ENT_NOQUOTES, 'UTF-8'); $text = str_replace('&', '&amp;', $text); $text = str_replace('"', "&#34;", $text); $text = preg_replace('#\s+[\n|\r]+$#i', '', $text); $text = preg_replace('#[\n|\r]+#i', "\n", $text); $text = preg_replace('#(\s)\n+#i', "\n", $text); $text = preg_replace('#^[\n\r\s]#i', '', $text); $text = preg_replace('/[\x{0001}-\x{0009}]/u', '', $text); $text = preg_replace('/[\x{000b}-\x{001f}]/u', '', $text); $text = preg_replace('/[\x{0080}-\x{009F}]/u', '', $text); $text = preg_replace('/[\x{0600}-\x{FFFF}]/u', '', $text); $text = preg_replace("/(™|®|©|&trade;|&reg;|&copy;|&#8482;|&#174;|&#169;)/", "", $text); if ($allow_restricted_html) { $text = preg_replace('/\n/', "<br />\n", $text); $text = preg_replace('/$/', "<br />\n\n", $text); } else { $text = str_replace("\n", ', ', $text); $text = trim(rtrim($text, ', ')); } return ($text); } function fn_get_amazon_conditions() { return array( 1 => 'New', 2 => 'UsedLikeNew', 3 => 'UsedVeryGood', 4 => 'UsedGood', 5 => 'UsedAcceptable', 6 => 'CollectibleLikeNew', 7 => 'CollectibleVeryGood', 8 => 'CollectibleGood', 9 => 'CollectibleAcceptable', 10 => 'Refurbished', 11 => 'Club', ); } function fn_get_amazon_config($market_region, $_auth = array()) { $addon = Tygh\Registry::get('addons.sd_amazon_products'); switch ($market_region) { case 'us': $endpoint = US_ENDPOINT; break; case 'jp': case 'ja': $endpoint = JP_ENDPOINT; break; case 'de': case 'uk': $endpoint = UK_ENDPOINT; break; default: $endpoint = US_ENDPOINT; } if (!empty($_auth)) { if (empty($_auth['keyId']) && empty($_auth['merchantId'])) { return false; } } elseif (empty($addon['aws_key_id__' . $market_region]) && empty($addon['seller_id__' . $market_region])) { return false; } $amazon_config = array( 'merchantId' => $addon['seller_id__' . $market_region] ?: $_auth['merchantId'], 'keyId' => $addon['aws_key_id__' . $market_region] ?: $_auth['keyId'], 'secretKey' => $addon['secret_key__' . $market_region] ?: $_auth['secretKey'], 'marketplaceId' => $addon['marketplace_id__' . $market_region] ?: $_auth['marketplaceId'], 'serviceUrl' => $endpoint, 'MWSAuthToken' => '', ); return $amazon_config; } function fn_get_amazon_orders($params) { $amazon_orders = array(); if (!empty($params['marketplace'])) { try { $amazon_config = fn_get_amazon_config($params['marketplace']); $addon_settings = Registry::get('addons.sd_amazon_products'); $list_orders = new \AmazonOrderList($amazon_config); $list_orders->setLimits('Created', $params['time_from'], $params['time_to']); $list_orders->setMarketplaceFilter($amazon_config['marketplaceId']); $list_orders->setFulfillmentChannelFilter('MFN'); $list_orders->fetchOrders(); $orders = $list_orders->getList(); if (!empty($orders)) { $cart_orders = db_get_hash_array('SELECT order_id, amz_order_id, user_id, status FROM ?:orders', 'amz_order_id'); $cart_users = db_get_hash_array('SELECT user_id, email FROM ?:users', 'email'); $cart_payments = db_get_hash_array('SELECT payment_id, amz_payment FROM ?:payments', 'amz_payment'); $currencies = fn_get_currencies(); foreach ($orders as $order) { $amazon_order = $order->getData(); $amazon_order['ready_for_import'] = $amazon_order['update_status'] = false; $amazon_order['purchase_date'] = strtotime($amazon_order['PurchaseDate']); $amazon_order['cart_order_id'] = !empty($cart_orders[$amazon_order['AmazonOrderId']]) ? $cart_orders[$amazon_order['AmazonOrderId']]['order_id'] : 0; $amazon_order['status'] = !empty($addon_settings[strtolower($amazon_order['OrderStatus']) . '_status']) ? $addon_settings[strtolower($amazon_order['OrderStatus']) . '_status'] : ''; if (!empty($amazon_order['BuyerEmail']) && !empty($cart_users[$amazon_order['BuyerEmail']])) { $amazon_order['user_id'] = $cart_users[$amazon_order['BuyerEmail']]['user_id']; } elseif (!empty($amazon_order['cart_order_id'])) { $amazon_order['user_id'] = $cart_orders[$amazon_order['AmazonOrderId']]['user_id']; } else { $amazon_order['user_id'] = 0; } $amazon_order['payment_id'] = (!empty($amazon_order['PaymentMethod']) && !empty($cart_payments[$amazon_order['PaymentMethod']])) ? $cart_payments[$amazon_order['PaymentMethod']]['payment_id'] : 0; if (empty($amazon_order['cart_order_id']) && in_array($amazon_order['OrderStatus'], array(AmazonOrderStatuses::UNSHIPPED, AmazonOrderStatuses::SHIPPED))) { $amazon_order['ready_for_import'] = !empty($amazon_order['payment_id']) && !empty($currencies[$amazon_order['OrderTotal']['CurrencyCode']]); } elseif (!empty($amazon_order['cart_order_id'])) { $amazon_order['update_status'] = !empty($amazon_order['status']) && $amazon_order['status'] != $cart_orders[$amazon_order['AmazonOrderId']]['status']; } $amazon_orders[$amazon_order['AmazonOrderId']] = $amazon_order; } } } catch (Exception $e) { $params['error'] = $e->getMessage(); } } return array($amazon_orders, $params); } function fn_get_amazon_order_items($amazon_order_id, $params, $category_id) { $order_items = array(); if (!empty($params['marketplace']) && !empty($amazon_order_id)) { try { $amazon_config = fn_get_amazon_config($params['marketplace']); $list_order_items = new \AmazonOrderItemList($amazon_config, $amazon_order_id); $list_order_items->fetchItems(); if (!empty($list_order_items->getItems())) { $products = db_get_hash_array('SELECT product_id, amz_asin FROM ?:products', 'amz_asin'); $currencies = fn_get_currencies(); foreach ($list_order_items->getItems() as $item) { $item['product_id'] = !empty($products[$item['ASIN']]) ? $products[$item['ASIN']]['product_id'] : 0; if (empty($item['product_id'])) { $item['product_id'] = fn_import_amazon_product($item, $category_id, $currencies); $products[$item['ASIN']] = array( 'product_id' => $item['product_id'], 'amz_asin' => $item['ASIN'], ); } $order_items[] = $item; } } } catch (Exception $e) { $params['error'] = $e->getMessage(); } } return array($order_items, $params); } function fn_import_amazon_product($item, $category_id, $currencies) { $product_id = 0; if (!empty($item)) { $product_data = array( 'product' => $item['Title'], 'product_code' => $item['SellerSKU'], 'category_ids' => array($category_id), 'company_id' => fn_get_default_company_id(), 'price' => fn_parse_amazon_product_price($item['ItemPrice']['Amount'], $item['ItemPrice']['CurrencyCode'], $currencies), 'status' => 'H', 'tracking' => 'D', 'amz_asin' => $item['ASIN'], 'amz_sku' => $item['SellerSKU'], ); $product_id = fn_update_product($product_data, 0); } return $product_id; } function fn_parse_amazon_product_price($price, $amazon_currency, $currencies) { if (!empty($currencies[$amazon_currency])) { $primary_currency = array(); foreach ($currencies as $currency) { if ($currency['is_primary'] == 'Y') { $primary_currency = $currency; } } if ($primary_currency['currency_code'] != $amazon_currency) { $price = $price * $currencies[$amazon_currency]['coefficient']; } } return $price; } function fn_get_amazon_order_data($amazon_order_id, $orders, $params) { if (empty($amazon_order_id)) { return; } $order_imported = $status_updated = false; $addon_settings = Registry::get('addons.sd_amazon_products'); if (empty($addon_settings['default_category'])) { $category_data = array( 'category' => AMAZON_CATEGORY_NAME, 'parent_id' => 0, 'company_id' => fn_get_default_company_id(), ); $addon_settings['default_category'] = fn_update_category($category_data, 0); } if (empty($orders)) { list($orders, $params) = Tygh::$app['session']['amazon_order_list']; } if (!empty($order = $orders[$amazon_order_id])) { if ($order['ready_for_import']) { if ($addon_settings['sync_users'] == 'Y' && empty($order['user_id'])) { $order['user_id'] = fn_import_amazon_users($order); } list($items, $params) = fn_get_amazon_order_items($amazon_order_id, $params, $addon_settings['default_category']); if (!empty($items)) { $order_id = fn_import_amazon_order($order, $items, $addon_settings, $params); $order_imported = !empty($order_id); } } elseif ($order['update_status']) { fn_change_order_status($order['cart_order_id'], $order['status'], '', array()); $status_updated = true; } } return array($order_imported, $status_updated); } function fn_import_amazon_order($order, $items, $addon_settings, $params, $lang_code = CART_LANGUAGE) { $order_id = 0; if (!empty($order) && !empty($items)) { $products = array(); $subtotal = $shipping_cost = $discount = $tax = 0; $currencies = fn_get_currencies(); $default_company_id = fn_get_default_company_id(); foreach ($items as $item) { $products[$item['product_id']] = fn_get_product_data($item['product_id'], Tygh::$app['session']['auth'], $lang_code); $products[$item['product_id']]['price'] = fn_parse_amazon_product_price($item['ItemPrice']['Amount'], $item['ItemPrice']['CurrencyCode'], $currencies); $products[$item['product_id']]['price'] += fn_parse_amazon_product_price($item['GiftWrapPrice']['Amount'], $item['GiftWrapPrice']['CurrencyCode'], $currencies); $products[$item['product_id']]['base_price'] = $products[$item['product_id']]['price']; $products[$item['product_id']]['amount'] = $item['QuantityOrdered']; $subtotal += $products[$item['product_id']]['price']; $shipping_cost += fn_parse_amazon_product_price($item['ShippingPrice']['Amount'], $item['ShippingPrice']['CurrencyCode'], $currencies); $shipping_cost += fn_parse_amazon_product_price($item['ShippingTax']['Amount'], $item['ShippingTax']['CurrencyCode'], $currencies); $shipping_cost -= fn_parse_amazon_product_price($item['ShippingDiscount']['Amount'], $item['ShippingDiscount']['CurrencyCode'], $currencies); $discount = fn_parse_amazon_product_price($item['PromotionDiscount']['Amount'], $item['PromotionDiscount']['CurrencyCode'], $currencies); $tax += fn_parse_amazon_product_price($item['ItemTax']['Amount'], $item['ItemTax']['CurrencyCode'], $currencies); $tax += fn_parse_amazon_product_price($item['GiftWrapTax']['Amount'], $item['GiftWrapTax']['CurrencyCode'], $currencies); } $cart = array( 'subtotal' => $subtotal, 'products' => $products, 'product_groups' => array(), 'user_data' => $addon_settings['sync_users'] == 'Y' ? fn_get_user_info($order['user_id']) : fn_parse_amazon_user_date($order), 'user_id' => $addon_settings['sync_users'] == 'Y' ? $order['user_id'] : 0, 'payment_id' => $order['payment_id'], 'shipping_ids' => array($addon_settings['default_shipping']), 'company_id' => $default_company_id, 'calculate_shipping' => true, ); Registry::set('runtime.company_id', $default_company_id); list ($cart_products, $product_groups) = fn_calculate_cart_content($cart, Tygh::$app['session']['auth'], 'A', false); $cart['shipping_cost'] = $shipping_cost; $cart['total'] = fn_parse_amazon_product_price($order['OrderTotal']['Amount'], $order['OrderTotal']['CurrencyCode'], $currencies); $cart['discount'] = $discount; $cart['stored_taxes'] = 'Y'; $cart['tax_subtotal'] = $tax; foreach ($cart['products'] as $key => $_product) { $cart['products'][$key]['base_price'] = $cart['products'][$key]['price'] = $products[$key]['price']; } $cart['product_groups'][0]['shipping'][$addon_settings['default_shipping']]['rate'] = $shipping_cost; $cart['product_groups'][0]['shipping'][$addon_settings['default_shipping']]['stored_shipping'] = true; $cart['product_groups'][0]['chosen_shippings'][0]['rate'] = $shipping_cost; $cart['product_groups'][0]['chosen_shippings'][0]['stored_shipping'] = true; list($order_id, $order_status) = fn_update_order($cart); $status = !empty($order['status']) ? $order['status'] : DEFAULT_STATUS_OPEN_ORDER; fn_change_order_status($order_id, $status, '', array()); db_query('UPDATE ?:orders SET amz_order_id = ?s WHERE order_id = ?i', $order['AmazonOrderId'], $order_id); } return $order_id; } function fn_import_amazon_users($order) { $user_id = 0; if (!empty($order['BuyerEmail'])) { $user_id = db_get_field('SELECT user_id FROM ?:users WHERE email = ?s', $order['BuyerEmail']); if (empty($user_id)) { $user_data = fn_parse_amazon_user_date($order); list($user_id, ) = fn_update_user(0, $user_data, Tygh::$app['session']['auth'], false, array()); } } return $user_id; } function fn_parse_amazon_user_date($order) { $user_data = array(); if (!empty($order['BuyerEmail'])) { $user_data = array( 'email' => $order['BuyerEmail'], 'user_id' => 0, 'user_type' => 'C', 'status' => 'A', 'company_id' => fn_get_default_company_id(), ); $user_data['firstname'] = $user_data['s_firstname'] = $user_data['b_firstname'] = !empty($order['BuyerName']) ? $order['BuyerName'] : ''; $user_data['phone'] = $user_data['s_phone'] = $user_data['b_phone'] = !empty($order['ShippingAddress']['Phone']) ? $order['ShippingAddress']['Phone'] : ''; $user_data['b_address'] = $user_data['s_address'] = !empty($order['ShippingAddress']['AddressLine1']) ? $order['ShippingAddress']['AddressLine1'] : ''; $user_data['b_address_2'] = $user_data['s_address_2'] = !empty($order['ShippingAddress']['AddressLine2']) ? $order['ShippingAddress']['AddressLine2'] : ''; $user_data['b_city'] = $user_data['s_city'] = !empty($order['ShippingAddress']['City']) ? $order['ShippingAddress']['City'] : ''; $user_data['b_country'] = $user_data['s_country'] = !empty($order['ShippingAddress']['CountryCode']) ? $order['ShippingAddress']['CountryCode'] : ''; $user_data['b_zipcode'] = $user_data['s_zipcode'] = !empty($order['ShippingAddress']['PostalCode']) ? $order['ShippingAddress']['PostalCode'] : ''; $state_code = db_get_field( 'SELECT states.code FROM ?:states AS states ' . 'LEFT JOIN ?:state_descriptions AS state_descriptions ON state_descriptions.state_id = states.state_id ' . 'WHERE states.country_code = ?s AND state_descriptions.state = ?s', $user_data['b_country'], $order['ShippingAddress']['StateOrRegion'] ); $user_data['b_state'] = $user_data['s_state'] = $state_code; } return $user_data; } function fn_sd_amazon_products_get_products($params, &$fields, &$sortings, $condition, $join, $sorting, $group_by, $lang_code, $having) { $runtime = Registry::get('runtime'); if ($runtime['controller'] == 'products' && $runtime['mode'] == 'manage') { $sortings['amz_synchronization'] = 'products.amz_synchronization'; $fields['amz_synchronization'] = 'products.amz_synchronization'; } } function fn_sd_amazon_products_get_product_categories($product_ids) { $products_categories = array(); $all_categories = array(); if ($product_ids && is_array($product_ids)) { $products_categories = db_get_hash_single_array('SELECT id_path, product_id FROM ?:categories AS a LEFT JOIN ?:products_categories AS b ON b.category_id = a.category_id WHERE b.product_id IN (?n) AND link_type = ?s', array('product_id', 'id_path'), $product_ids, 'M'); foreach ($products_categories as &$id_path) { $id_path = explode('/', $id_path); foreach ($id_path as $categories) { $all_categories[] = $categories; } } } return array($products_categories, $all_categories); } function fn_sd_amazon_products_check_product_ids($product_ids, $addition_check = false, $cron = false) { $all_categories = array(); $products_categories = array(); if ($product_ids && is_array($product_ids)) { if ($addition_check) { $product_ids = db_get_fields('SELECT product_id FROM ?:products WHERE product_id IN (?n) AND amz_synchronization = ?s', $product_ids, 'Y'); } if ($product_ids) { list($products_categories, $all_categories) = fn_sd_amazon_products_get_product_categories($product_ids); if ($all_categories) { $product_ids = array_flip($product_ids); $categories_data = db_get_hash_single_array( 'SELECT category_id, amz_synchronization FROM ?:categories' . ' WHERE category_id IN (?n)', array('category_id', 'amz_synchronization'), $all_categories ); foreach ($products_categories as $p_id => $p_categories) { foreach ($p_categories as $p_category) { if (!empty($categories_data[$p_category]) && $categories_data[$p_category] == 'N') { unset($product_ids[$p_id]); continue; } } } $product_ids = array_flip($product_ids); } else { $product_ids = array(); } } } return $product_ids; } function fn_sd_amazon_products_sort_array_by_key($array, $sort_by = SORT_ASC) { $result = array(); $tmp_sort = array_flip($array); if ($sort_by == SORT_ASC) { arsort($tmp_sort); } else { rsort($tmp_sort); } foreach ($tmp_sort as $new_key) { if (isset($array[$new_key])) { $result[] = $array[$new_key]; } } return $result; } function fn_sd_amazon_products_get_products_for_synchronization($company_id = 0, $category_ids = array()) { $error = false; $product_ids = array(); $condition = $join = ''; if (!empty($company_id)) { $condition .= db_quote(' AND company_id = ?i', $company_id); } if (!empty($category_ids)) { $category_ids = fn_sd_amazon_products_check_category_ids($category_ids); if (!empty($category_ids)) { $condition .= db_quote(' AND category_id IN (?n) AND link_type = ?s', $category_ids, 'M'); $join .= db_quote('LEFT JOIN ?:products_categories ON ?:products_categories.product_id = ?:products.product_id'); } else { $error = true; } } $condition .= db_quote(' AND amz_synchronization = ?s', 'Y'); if (!$error) { $product_ids = db_get_fields('SELECT ?:products.product_id AS a FROM ?:products ?p WHERE 1 ?p', $join, $condition); } return $product_ids; } function fn_sd_amazon_products_check_main_cetegories($category_ids) { $result = array(); if ($category_ids && is_array($category_ids)) { $result = db_get_fields('SELECT category_id FROM ?:categories WHERE category_id IN (?n) AND amz_synchronization = ?s', $category_ids, 'Y'); } return $result; } function fn_sd_amazon_products_get_category_ids($categories_tree, &$categories) { if ($categories_tree && is_array($categories_tree)) { foreach ($categories_tree as $category) { if (isset($category['category_id'])) { $categories[] = $category['category_id']; } if (!empty($category) && !empty($category['subcategories'])) { fn_sd_amazon_products_get_category_ids($category['subcategories'], $categories); } } } return $categories; } function fn_sd_amazon_products_check_category_ids($category_ids) { $result = array(); $categories_tree = array(); if ($category_ids && is_array($category_ids)) { $category_ids = fn_sd_amazon_products_check_main_cetegories($category_ids); if (!empty($category_ids)) { foreach ($category_ids as $category_id) { $params = array ( 'category_id' => $category_id, 'simple' => true, 'amazon' => true ); list($array_categories_tree, ) = fn_get_categories($params, CART_LANGUAGE); if (empty($array_categories_tree)) { $array_categories_tree[]['category_id'] = $category_id; } $categories_tree = array_merge($categories_tree, $array_categories_tree); } if (!empty($categories_tree)) { $result = fn_sd_amazon_products_get_category_ids($categories_tree); foreach ($category_ids as $category_id) { $result[] = $category_id; } } } } return $result; } function fn_sd_amazon_products_get_categories(&$params, $join, $condition, $fields, $group_by, $sortings, $lang_code) { if (!empty($params['amazon'])) { $condition .= db_quote(' AND ?:categories.amz_synchronization = ?s', 'Y'); } } function fn_sd_amazon_products_export_import($request) { $action = Registry::get('runtime.action'); $product_ids = array(); if ($action == 'products') { if (!empty($request['product_ids'])) { $product_ids = $request['product_ids']; } elseif (!empty($request['product_id'])) { $product_ids = array($request['product_id']); } } elseif ($action == 'categories') { if (!empty($request['category_ids'])) { $category_ids = $request['category_ids']; } elseif (!empty($request['category_id'])) { $category_ids = array($request['category_id']); } if (!empty($category_ids)) { $product_ids = fn_sd_amazon_products_get_products_for_synchronization(0, $category_ids); $product_ids = fn_sd_amazon_products_check_product_ids($product_ids, true); } } return $product_ids; } function fn_sd_amazon_products_update_product_pre(&$product_data, $product_id, $lang_code, $can_update) { foreach (array('amz_sku', 'amz_asin', 'amz_ean', 'amz_upc', 'amz_isbn') as $amz_data) { if (!empty($product_data[$amz_data])) { $product_data[$amz_data] = trim($product_data[$amz_data]); } } } function fn_sd_amazon_products_get_orders($params, &$fields, $sortings, &$condition, $join, $group) { $fields[] = '?:orders.amz_order_id'; if (!empty($params['show_only_orders'])) { $condition .= db_quote(' AND ?:orders.amz_order_id != ?s', ''); } } function fn_amazon_product_variations_generate($product_id, $combinations, array $options_ids) { $product_manager = Tygh::$app['addons.product_variations.product.manager']; if (!empty($combinations) && !empty($options_ids)) { $languages = Languages::getAll(); $product_row = db_get_row('SELECT * FROM ?:products WHERE product_id = ?i', $product_id); foreach ($combinations as $variation_code => $combination) { fn_amazon_product_variations_save_variation($product_row, $combination, $languages); } $product_manager->changeProductTypeToConfigurable($product_id, array_values($options_ids)); } } function fn_amazon_product_variations_save_variation($parent_product_data, array $combination, $languages) { $data = array_merge($parent_product_data, array( 'product_id' => null, 'tracking' => ProductTracking::TRACK_WITHOUT_OPTIONS, 'product_type' => ProductManager::PRODUCT_TYPE_VARIATION, 'parent_product_id' => $parent_product_data['product_id'], 'variation_code' => $combination['variation'], 'variation_options' => json_encode($combination['selected_options']), 'timestamp' => time(), 'list_price' => $combination['list_price'], 'weight' => $combination['weight'], 'amount' => isset($combination['amount']) ? $combination['amount'] : 1, 'product_code' => $combination['code'], )); $product_variation_id = db_query('INSERT INTO ?:products ?e', $data); fn_update_product_prices($product_variation_id, array( 'price' => $combination['price'], 'prices' => array(), )); foreach ($languages as $lang_code => $lang) { $description_data = array( 'product_id' => $product_variation_id, 'company_id' => $data['company_id'], 'lang_code' => $lang_code, 'product' => $combination['name'], ); db_query('INSERT INTO ?:product_descriptions ?e', $description_data); } return $product_variation_id; } function fn_sd_amazon_products_get_product_option_data_pre($option_id, $product_id, $fields, $condition, $join, &$extra_variant_fields, $lang_code) { $extra_variant_fields = 'a.amazon_variant,'; } 