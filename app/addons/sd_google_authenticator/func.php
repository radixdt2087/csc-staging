<?php
 defined('BOOTSTRAP') or die('Access denied'); require_once(dirname(__FILE__) . '/lib/GoogleAuthenticator.php'); use Tygh\GoogleAuth\GoogleAuth; use Tygh\Registry; use Tygh\Http; use Tygh\Addons\SchemesManager; function fn_sd_google_authenticator_check_auth_code($code = 0, $secret = 0) { $result = false; if (!empty($code) && !empty($secret)) { $tfa = GoogleAuth::instance(); $result = $tfa->verifyCode($secret, $code) === true; } return $result; } function fn_sd_google_authenticator_install() { $section_id = db_get_field( 'SELECT section_id
        FROM ?:settings_sections
        WHERE name = ?s', SECURITY_SECTION_NAME ); if (!empty($section_id)) { $new_setting_data = array( 'name' => TWO_STEPS_VERIFICATION_SETTING_NAME, 'section_id' => $section_id, 'type' => 'C', 'value' => 'N', 'position' => 60, ); $object_id = db_query('INSERT INTO ?:settings_objects ?e', $new_setting_data); $languages = fn_get_translation_languages(true); if (!empty($languages) && !empty($object_id)) { foreach ($languages as $lang_code => $lang_data) { $description = array( 'object_id' => $object_id, 'lang_code' => $lang_code, 'value' => __('enable_two_steps_verification', array(), $lang_code), ); if ($description['value'][0] == '_') { reset($languages); $description = __('enable_two_steps_verification', array(), key($languages)); } db_query('INSERT INTO ?:settings_descriptions ?e', $description); } } } } function fn_sd_google_authenticator_uninstall() { $object_id = db_get_field( 'SELECT object_id
        FROM ?:settings_objects
        WHERE name = ?s', TWO_STEPS_VERIFICATION_SETTING_NAME ); if (!empty($object_id)) { db_query('DELETE FROM ?:settings_objects WHERE object_id = ?i', $object_id); db_query('DELETE FROM ?:settings_descriptions WHERE object_id = ?i', $object_id); } } function fn_sd_google_authenticator_save_secret_key($user_id = 0, $secret = 0) { $result = false; if (!empty($user_id) && !empty($secret)) { $result = db_query( 'UPDATE ?:users
            SET two_steps_auth_secret = ?s
            WHERE user_id = ?i', $secret, $user_id ); } return $result; } function fn_sd_google_authenticator_check_user_has_security_code($user_id = 0) { $result = false; if (!empty($user_id)) { $result = db_get_field( 'SELECT
            CASE WHEN two_steps_auth_secret <> ?s
                THEN 1
                ELSE 0
                END AS has_secret
            FROM  ?:users
            WHERE user_id = ?i', '', $user_id ); } return $result; } function fn_sd_google_authenticator_drop_user_secret_code($user_id = 0) { $result = false; if (!empty($user_id)) { $result = db_query( 'UPDATE ?:users
            SET ?u
            WHERE user_id = ?i', array('two_steps_auth_secret' => ''), $user_id ); } return $result; } function fn_sd_google_authenticator_get_user_email($user_id = 0) { $email = ''; if (!empty($user_id)) { $email = db_get_field( 'SELECT email
            FROM ?:users
            WHERE user_id = ?i', $user_id ); } return $email; } function fn_sd_google_authenticator_is_allow_auth($user_id = 0) { $user_type = 'C'; if (!empty($user_id)) { $user_type = db_get_field('SELECT user_type FROM ?:users WHERE user_id = ?i', $user_id); } return ($user_type == 'A' || $user_type == 'V'); } function fn_sd_google_authenticator_has_secret_code($user_id = 0) { $has_code = false; if (!empty($user_id)) { $has_code = (bool) fn_sd_google_authenticator_get_user_secret_code($user_id); } return $has_code; } function fn_sd_google_authenticator_get_user_secret_code($user_id = 0) { $secret_code = null; if (!empty($user_id)) { $secret_code = db_get_field('SELECT two_steps_auth_secret FROM ?:users WHERE user_id = ?i', $user_id); } return $secret_code; } function fn_sd_google_authenticator_before_dispatch($controller, $mode, $action, $dispatch_extra, $area) { $auth = Tygh::$app['session']['auth']; if (!empty($auth['user_id']) && !empty($auth['auth_code_required']) && $controller != 'google_authenticator' && $mode != 'login' && $area = 'A' ) { if ($controller == 'notifications' || ($controller == 'auth' && $mode == 'logout')) { return; } $entry_point = fn_sd_google_authenticator_get_admin_area_entry_point($auth); $return_url = !empty($_REQUEST['return_url']) ? $_REQUEST['return_url'] : $entry_point; fn_set_notification('E', __('error'), __('access_denied')); fn_redirect("{$entry_point}?dispatch=google_authenticator.login&return_url={$return_url}"); } } function fn_sd_google_authenticator_get_admin_area_entry_point($auth = array()) { if (!empty($auth)) { $auth = Tygh::$app['session']['auth']; } if (!empty($auth['user_type']) && $auth['user_type'] == 'V') { $entry_point = Registry::get('config.vendor_index'); } else { $entry_point = Registry::get('config.admin_index'); } return $entry_point; } function fn_sd_google_authenticator_set_verification_hash($user_id) { if (!empty($user_id)) { $data = fn_sd_google_authenticator_get_verification_hash($user_id, 0); $verification_hash = md5($user_id . TIME); $data[] = array('verification_hash' => $verification_hash, 'expire' => THIRTY_DAYS_TO_SECONDS + TIME); $data = serialize($data); db_query('UPDATE ?:users SET remember_data = ?s WHERE user_id = ?i', $data, $user_id); fn_set_cookie(VERIFICATION_HASH, $verification_hash, THIRTY_DAYS_TO_SECONDS); } } function fn_sd_google_authenticator_get_verification_hash($user_id, $type = 1) { $verification_hash = array(); if (!empty($user_id)) { $remember_data = db_get_field('SELECT remember_data FROM ?:users WHERE user_id = ?i', $user_id); if (!empty($remember_data)) { $remember_data = unserialize($remember_data); if (!empty($remember_data)) { foreach ($remember_data as $value) { if (!empty($value['verification_hash']) && !empty($value['expire']) && $value['expire'] > TIME) { $verification_hash[] = ($type == 1) ? $value['verification_hash'] : $value; } } } } } return $verification_hash; } function fn_sd_google_authenticator_update_verification_hash($user_id) { if (!empty($user_id)) { $data = fn_sd_google_authenticator_get_verification_hash($user_id, 0); $data = serialize($data); db_query('UPDATE ?:users SET remember_data = ?s WHERE user_id = ?i', $data, $user_id); } } 